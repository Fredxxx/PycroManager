import json
mic = []


def initMICjson(main):
    """reads slm parameters from initialisation file"""
    JSON = mic.initFileJ

    mic.umApp = JSON.get("basics").get("micromanager directory")
    mic.umConfig1 = JSON.get("basics").get("configuration file main")
    mic.umConfig2 = JSON.get("basics").get("configuration file second cam")
    mic.umPort1 = JSON.get("basics").get("java port for main micromanager instance")
    mic.umPort2 = JSON.get("basics").get("java port for second cam micromanager instance")

    main.le_filePath.setText(JSON.get("scan settings").get("file path"))
    mic.filePath = JSON.get("scan settings").get("file path")
    main.le_fileName.setText(JSON.get("scan settings").get("file name"))
    mic.fileName = JSON.get("scan settings").get("file name")
    main.cBox_triggMode.setCurrentText(JSON.get("scan settings").get("microscopy mode"))
    mic.acqMode = JSON.get("scan settings").get("microscopy mode")
    main.dsb_expTime.setValue(float(JSON.get("scan settings").get("exposure time")))
    mic.expTime = float(JSON.get("scan settings").get("exposure time"))
    main.dsb_extDelay.setValue(float(JSON.get("scan settings").get("delay time after camera trigger")))
    mic.addTime = float(JSON.get("scan settings").get("delay time after camera trigger"))
    main.dsb_del.setValue(float(JSON.get("scan settings").get("delay time for hardware hook function")))
    mic.delay = float(JSON.get("scan settings").get("delay time for hardware hook function"))
    main.dsb_tInterval.setValue(float(JSON.get("scan settings").get("time interval")))
    mic.tInt = float(JSON.get("scan settings").get("time interval"))
    main.cBox_tInterval.setCurrentText(JSON.get("scan settings").get("time interval unit"))
    mic.tUnit = JSON.get("scan settings").get("time interval unit")
    main.sb_tSteps.setValue(int(JSON.get("scan settings").get("number of time steps")))
    mic.tSteps = int(JSON.get("scan settings").get("number of time steps"))
    main.cBox_mdaOrder.setCurrentText(JSON.get("scan settings").get("order multidimensional acquisition"))
    mic.mdaOrder = JSON.get("scan settings").get("order multidimensional acquisition")
    main.dsb_zRange.setValue(float(JSON.get("scan settings").get("scan range [um]")))
    mic.zRange = float(JSON.get("scan settings").get("scan range [um]"))
    main.sb_zSteps.setValue(int(JSON.get("scan settings").get("number of scan steps")))
    mic.numStepsZ = int(JSON.get("scan settings").get("number of scan steps"))
    main.cb_liveImg.setChecked(booleanMic(JSON.get("scan settings").get("live imaging active")))
    mic.liveImg = booleanMic(JSON.get("scan settings").get("live imaging active"))
    main.cb_SLM.setChecked(booleanMic(JSON.get("scan settings").get("SLM active")))
    mic.SLMactive = booleanMic(JSON.get("scan settings").get("SLM active"))

    main.dsb_galvoStart.setValue(float(JSON.get("light sheet").get("galvo start position [um]")))
    mic.galvoStart = float(JSON.get("light sheet").get("galvo start position [um]"))
    main.dsb_galvoEnd.setValue(float(JSON.get("light sheet").get("galvo end position [um]")))
    mic.galvoEnd = float(JSON.get("light sheet").get("galvo end position [um]"))
    main.dsb_galvoPos.setValue(float(JSON.get("light sheet").get("galvo current position [um]")))
    mic.galvoPos = float(JSON.get("light sheet").get("galvo current position [um]"))
    main.sb_galvoFreq.setValue(int(JSON.get("light sheet").get("galvo freq [Hz]")))
    mic.galvoFreq = int(JSON.get("light sheet").get("galvo freq [Hz]"))
    main.sb_galvoReps.setValue(int(JSON.get("light sheet").get("galvo swipe repetitions")))
    mic.galvoReps = int(JSON.get("light sheet").get("galvo swipe repetitions"))
    main.dsb_expTime2.setValue(float(JSON.get("light sheet").get("camera 2 exposure time [ms]")))
    mic.expTime2 = float(JSON.get("light sheet").get("camera 2 exposure time [ms]"))

    main.dsb_TTLamplitude.setValue(float(JSON.get("advanced").get("TTL trigger amplitude [V]")))
    mic.amplitudeTTL = float(JSON.get("advanced").get("TTL trigger amplitude [V]"))
    main.sb_TTLuptime.setValue(int(JSON.get("advanced").get("TTL trigger uptime [%]")))
    mic.uptimeTTL = int(JSON.get("advanced").get("TTL trigger uptime [%]"))
    main.sb_TTLdigEvents.setValue(int(JSON.get("advanced").get("TTL trigger digital event")))
    mic.digEvent = int(JSON.get("advanced").get("TTL trigger digital event"))

    main.le_aoMod.setText(JSON.get("calibration").get("name of analog output modulation"))
    mic.aoMod = JSON.get("calibration").get("name of analog output modulation")
    main.le_aiMon.setText(JSON.get("calibration").get("name of analog input monitor"))
    mic.aiMon = JSON.get("calibration").get("name of analog input monitor")
    main.le_saveCalibPath.setText(JSON.get("calibration").get("save path of calibration file"))
    mic.calibPath = JSON.get("calibration").get("save path of calibration file")
    main.dsb_modMin.setValue(float(JSON.get("calibration").get("minimum modulation voltage [V]")))
    mic.modMin = float(JSON.get("calibration").get("minimum modulation voltage [V]"))
    main.dsb_modMax.setValue(float(JSON.get("calibration").get("maximum modulation voltage [V]")))
    mic.modMax = float(JSON.get("calibration").get("maximum modulation voltage [V]"))
    main.dsb_umAccu.setValue(float(JSON.get("calibration").get("travel accuracy [um]")))
    mic.umAccu = float(JSON.get("calibration").get("travel accuracy [um]"))
    main.dsb_umMin.setValue(float(JSON.get("calibration").get("minimum travel position [um]")))
    mic.umMin = float(JSON.get("calibration").get("minimum travel position [um]"))
    main.dsb_umMax.setValue(float(JSON.get("calibration").get("maximum travel position [um]")))
    mic.umMax = float(JSON.get("calibration").get("maximum travel position [um]"))


def booleanMic(val):
    if val == "False" or val == "FALSE" or val == "True" or val == "TRUE":
        ret = eval(val)
    else:
        print("jsonReadWrite/booleanMic: Could not identify boolean input")
    return ret


def writeMICjson():
    """overwrites initialisation file with current SLM GUI parameters"""
    JSON = mic.initFileJ
    JSON["basics"]["filepaths"]["initialisation file"] = str(mic.initFileP)
    JSON["basics"]["filepaths"]["look up table for stage 1"] = str(mic.LUTstage1)
    JSON["basics"]["filepaths"]["look up table for stage 2"] = str(mic.LUTstage2)
    JSON["basics"]["filepaths"]["uManager config path"] = str(mic.selfconfig)
    JSON["basics"]["loaded devices"] = str(mic.lDev)
    JSON["basics"]["current working directory"] = str(mic.cwd)
    JSON["basics"]["micromanager directory"] = str(mic.umApp)
    JSON["basics"]["configuration file main"] = str(mic.umConfig1)
    JSON["basics"]["configuration file second cam"] = str(mic.umConfig2)
    JSON["basics"]["java port for main micromanager instance"] = str(mic.umPort1)
    JSON["basics"]["java port for second cam micromanager instance"] = str(mic.umPort2)

    JSON["scan settings"]["file path"] = str(mic.filePath)
    JSON["scan settings"]["file name"] = str(mic.fileName)
    JSON["scan settings"]["microscopy mode"] = str(mic.acqMode)
    JSON["scan settings"]["exposure time"] = str(mic.expTime)
    JSON["scan settings"]["delay time after camera trigger"] = str(mic.addTime)
    JSON["scan settings"]["delay time for hardware hook function"] = str(mic.delay)
    JSON["scan settings"]["time interval"] = str(mic.tInt)
    JSON["scan settings"]["time interval unit"] = str(mic.tUnit)
    JSON["scan settings"]["number of time steps"] = str(mic.tSteps)
    JSON["scan settings"]["order multidimensional acquisition"] = str(mic.mdaOrder)
    JSON["scan settings"]["scan range [um]"] = str(mic.zRange)
    JSON["scan settings"]["number of scan steps"] = str(mic.numStepsZ)
    JSON["scan settings"]["scan start position [um]"] = str(mic.posStartZ)
    JSON["scan settings"]["scan end position [um]"] = str(mic.posEndZ)
    JSON["scan settings"]["scan step size [um]"] = str(mic.stepSizeZ)
    JSON["scan settings"]["pre scan stage position [um]"] = str(mic.InitialStepV)
    JSON["scan settings"]["live imaging active"] = str(mic.liveImg)
    JSON["scan settings"]["SLM active"] = str(mic.SLMactive)
    JSON["scan settings"]["devices"]["z stage"] = str(mic.stageZ)
    JSON["scan settings"]["devices"]["camera"] = str(mic.camera)
    JSON["scan settings"]["laser"]["Laser 1 Power"] = str(mic.laser1Power)
    JSON["scan settings"]["laser"]["Laser 2 Power"] = str(mic.laser2Power)
    JSON["scan settings"]["laser"]["Laser 3 Power"] = str(mic.laser3Power)
    JSON["scan settings"]["laser"]["Laser 4 Power"] = str(mic.laser4Power)
    JSON["scan settings"]["laser"]["list of lasers"] = str(mic.laserList)
    JSON["scan settings"]["AOTF"]["AOTF 1 transmission"] = str(mic.AOTF1)
    JSON["scan settings"]["AOTF"]["AOTF 2 transmission"] = str(mic.AOTF2)
    JSON["scan settings"]["AOTF"]["AOTF 3 transmission"] = str(mic.AOTF3)
    JSON["scan settings"]["AOTF"]["AOTF 4 transmission"] = str(mic.AOTF4)

    JSON["light sheet"]["galvo start position [um]"] = str(mic.galvoStart)
    JSON["light sheet"]["galvo end position [um]"] = str(mic.galvoEnd)
    JSON["light sheet"]["galvo current position [um]"] = str(mic.galvoPos)
    JSON["light sheet"]["galvo freq [Hz]"] = str(mic.galvoFreq)
    JSON["light sheet"]["galvo swipe repetitions"] = str(mic.galvoReps)
    JSON["light sheet"]["camera 2 exposure time [ms]"] = str(mic.expTime2)

    JSON["advanced"]["TTL trigger uptime [%]"] = str(mic.uptimeTTL)
    JSON["advanced"]["TTL trigger amplitude [V]"] = str(mic.amplitudeTTL)
    JSON["advanced"]["TTL trigger digital event"] = str(mic.digEvent)

    JSON["calibration"]["name of analog output modulation"] = str(mic.aoMod)
    JSON["calibration"]["name of analog input monitor"] = str(mic.aiMon)
    JSON["calibration"]["save path of calibration file"] = str(mic.calibPath)
    JSON["calibration"]["minimum modulation voltage [V]"] = str(mic.modMin)
    JSON["calibration"]["maximum modulation voltage [V]"] = str(mic.modMax)
    JSON["calibration"]["minimum travel position [um]"] = str(mic.umMin)
    JSON["calibration"]["maximum travel position [um]"] = str(mic.umMax)
    JSON["calibration"]["travel accuracy [um]"] = str(mic.umAccu)

    with open(mic.initFileP, 'w') as fOut:
        json.dump(JSON, fOut, ensure_ascii=False, indent=4)


def initSLMjson(slm):
    """reads slm parameters from initialisation file"""
    slm.holo.maxPhase = int(mic.maxPhase1)
    JSON = mic.initFileJ
    slm.dsb_xOff.setValue(float(JSON.get("SLM").get("general").get("x offset")))
    slm.dsb_yOff.setValue(float(JSON.get("SLM").get("general").get("y offset")))
    slm.cb_SLMmode.setCurrentText(JSON.get("SLM").get("general").get("mode"))
    slm.dsb_radius.setValue(float(JSON.get("SLM").get("mask").get("outer radius")))
    slm.dsb_radIn.setValue(float(JSON.get("SLM").get("mask").get("inner radius")))
    slm.dsb_rollOff.setValue(float(JSON.get("SLM").get("mask").get("roll off")))
    slm.dsb_xPeriod.setValue(float(JSON.get("SLM").get("phase").get("x period")))
    slm.dsb_yPeriod.setValue(float(JSON.get("SLM").get("phase").get("y period")))
    slm.dsb_rPeriod.setValue(float(JSON.get("SLM").get("phase").get("r period")))
    slm.dsb_radGauss.setValue(float(JSON.get("SLM").get("phase").get("r radius Gauss")))
    slm.sb_lambda.setValue(float(JSON.get("SLM").get("advanced").get("wavelength [um]")))
    slm.sb_xPix.setValue(int(JSON.get("SLM").get("advanced").get("number of x pixel")))
    slm.sb_yPix.setValue(int(JSON.get("SLM").get("advanced").get("number of y pixel")))
    slm.dsb_fLens.setValue(float(JSON.get("SLM").get("advanced").get("focal length lens [mm]")))
    slm.dsb_fObj.setValue(float(JSON.get("SLM").get("advanced").get("focal length objective [mm]")))
    slm.dsb_refractiveInd.setValue(float(JSON.get("SLM").get("advanced").get("refractive index")))
    slm.dsb_pixSizeSLM.setValue(float(JSON.get("SLM").get("advanced").get("SLM pixel size [um]")))
    slm.dsb_meelad_dy.setValue(float(JSON.get("SLM").get("Meelad").get("delta y of two beams")))
    slm.dsb_meelad_dx.setValue(float(JSON.get("SLM").get("Meelad").get("delta x of two beams")))


def updateSLMholoClass(slm):
    """ get values from SLM generation GUI, write these into hologram instance and change SLM """
    slm.holo.wavelength = slm.sb_lambda.value()
    slm.holo.radiusOut = slm.dsb_radius.value()
    slm.holo.radiusIn = slm.dsb_radIn.value()
    slm.holo.lowPass = slm.dsb_rollOff.value()
    slm.holo.xOffset = slm.dsb_xOff.value()
    slm.holo.yOffset = slm.dsb_yOff.value()
    slm.holo.xAngle = slm.dsb_xAngle.value()
    slm.holo.yAngle = slm.dsb_yAngle.value()
    slm.holo.xPer = slm.dsb_xPeriod.value()
    slm.holo.yPer = slm.dsb_yPeriod.value()
    slm.holo.rPer = slm.dsb_rPeriod.value()
    slm.holo.rAngle = slm.dsb_rAngle.value()
    slm.holo.xNA = slm.dsb_xNA.value()
    slm.holo.yNA = slm.dsb_yNA.value()
    slm.holo.rNA = slm.dsb_rNA.value()
    slm.holo.xPix = slm.sb_xPix.value()
    slm.holo.yPix = slm.sb_yPix.value()
    slm.holo.SLMmode = slm.cb_SLMmode.currentText()
    slm.holo.radGauss = slm.dsb_radGauss.value()
    slm.holo.flens = slm.dsb_fLens.value()
    slm.holo.fobjective = slm.dsb_fObj.value()
    slm.holo.refractiveIdx = slm.dsb_refractiveInd.value()
    slm.holo.pixS = slm.dsb_pixSizeSLM.value()
    slm.holo.meelad_dx = slm.dsb_meelad_dx.value()
    slm.holo.meelad_dy = slm.dsb_meelad_dy.value()


def writeSLMjson(slm):
    """overwrites initialisation file with current SLM GUI parameters"""
    JSON = mic.initFileJ
    JSON["SLM"]["general"]["x offset"] = str(slm.holo.xOffset)
    JSON["SLM"]["general"]["y offset"] = str(slm.holo.yOffset)
    JSON["SLM"]["general"]["mode"] = str(slm.holo.SLMmode)
    JSON["SLM"]["mask"]["outer radius"] = str(slm.holo.radiusOut)
    JSON["SLM"]["mask"]["inner radius"] = str(slm.holo.radiusIn)
    JSON["SLM"]["mask"]["roll off"] = str(slm.holo.lowPass)
    JSON["SLM"]["phase"]["x angle"] = str(slm.holo.xAngle)
    JSON["SLM"]["phase"]["x period"] = str(slm.holo.xPer)
    JSON["SLM"]["phase"]["x NA"] = str(slm.holo.xNA)
    JSON["SLM"]["phase"]["y angle"] = str(slm.holo.yAngle)
    JSON["SLM"]["phase"]["y period"] = str(slm.holo.yPer)
    JSON["SLM"]["phase"]["y NA"] = str(slm.holo.yNA)
    JSON["SLM"]["phase"]["r angle"] = str(slm.holo.rAngle)
    JSON["SLM"]["phase"]["r period"] = str(slm.holo.rPer)
    JSON["SLM"]["phase"]["r NA"] = str(slm.holo.rNA)
    JSON["SLM"]["phase"]["r radius Gauss"] = str(slm.holo.radGauss)
    JSON["SLM"]["advanced"]["wavelength [um]"] = str(slm.holo.wavelength)
    JSON["SLM"]["advanced"]["number of x pixel"] = str(slm.holo.xPix)
    JSON["SLM"]["advanced"]["number of y pixel"] = str(slm.holo.yPix)
    JSON["SLM"]["advanced"]["focal length lens [mm]"] = str(slm.holo.flens)
    JSON["SLM"]["advanced"]["focal length objective [mm]"] = str(slm.holo.fobjective)
    JSON["SLM"]["advanced"]["refractive index"] = str(slm.holo.refractiveIdx)
    JSON["SLM"]["advanced"]["SLM pixel size [um]"] = str(slm.holo.pixS)
    JSON["SLM"]["Meelad"]["delta y of two beams"] = str(slm.holo.meelad_dy)
    JSON["SLM"]["Meelad"]["delta x of two beams"] = str(slm.holo.meelad_dx)
    with open(mic.initFileP, 'w') as fOut:
        json.dump(JSON, fOut, ensure_ascii=False, indent=4)